        - # Internal facilities for fast random number generation
        - 
        - immutable RandIntSampler  # for generating Int samples in [0, K-1]
        -     a::Int
        -     Ku::UInt
        -     U::UInt
        - 
        0     @compat RandIntSampler(K::Int) = (Ku = UInt(K); new(1, Ku, div(typemax(UInt), Ku) * Ku))
        0     @compat RandIntSampler(a::Int, b::Int) = (Ku = UInt(b-a+1); new(a, Ku, div(typemax(UInt), Ku) * Ku))
        - end
        - 
        - function rand(rng::AbstractRNG, s::RandIntSampler)
        0     x = rand(rng, UInt)
        0     while x >= s.U
        0         x = rand(rng, UInt)
        -     end
        0     @compat s.a + Int(rem(x, s.Ku))
        - end
        - rand(s::RandIntSampler) = rand(Base.GLOBAL_RNG, s)
        - 
        0 randi(rng::AbstractRNG, K::Int) = rand(rng, RandIntSampler(K))
        - randi(K::Int) = randi(Base.GLOBAL_RNG, K)
        0 randi(rng::AbstractRNG, a::Int, b::Int) = rand(rng, RandIntSampler(a, b))
        - randi(a::Int, b::Int) = randi(Base.GLOBAL_RNG, a, b)
        - 
